/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/about-us': RouteRecordInfo<'/about-us', '/about-us', Record<never, never>, Record<never, never>>,
    '/admin/': RouteRecordInfo<'/admin/', '/admin', Record<never, never>, Record<never, never>>,
    '/admin/advertisements/': RouteRecordInfo<'/admin/advertisements/', '/admin/advertisements', Record<never, never>, Record<never, never>>,
    '/admin/advertisements/[id]': RouteRecordInfo<'/admin/advertisements/[id]', '/admin/advertisements/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/admin/auth/login': RouteRecordInfo<'/admin/auth/login', '/admin/auth/login', Record<never, never>, Record<never, never>>,
    '/admin/carriers/': RouteRecordInfo<'/admin/carriers/', '/admin/carriers', Record<never, never>, Record<never, never>>,
    '/admin/carriers/[id]': RouteRecordInfo<'/admin/carriers/[id]', '/admin/carriers/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/admin/complaints/': RouteRecordInfo<'/admin/complaints/', '/admin/complaints', Record<never, never>, Record<never, never>>,
    '/admin/complaints/[id]': RouteRecordInfo<'/admin/complaints/[id]', '/admin/complaints/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/admin/offers/': RouteRecordInfo<'/admin/offers/', '/admin/offers', Record<never, never>, Record<never, never>>,
    '/admin/offers/[id]': RouteRecordInfo<'/admin/offers/[id]', '/admin/offers/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/admin/orders/': RouteRecordInfo<'/admin/orders/', '/admin/orders', Record<never, never>, Record<never, never>>,
    '/admin/orders/[id]': RouteRecordInfo<'/admin/orders/[id]', '/admin/orders/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/admin/profile/': RouteRecordInfo<'/admin/profile/', '/admin/profile', Record<never, never>, Record<never, never>>,
    '/admin/shippers/': RouteRecordInfo<'/admin/shippers/', '/admin/shippers', Record<never, never>, Record<never, never>>,
    '/admin/shippers/[id]': RouteRecordInfo<'/admin/shippers/[id]', '/admin/shippers/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/auth/register': RouteRecordInfo<'/auth/register', '/auth/register', Record<never, never>, Record<never, never>>,
    '/auth/register-success': RouteRecordInfo<'/auth/register-success', '/auth/register-success', Record<never, never>, Record<never, never>>,
    '/carriers/advertisements/': RouteRecordInfo<'/carriers/advertisements/', '/carriers/advertisements', Record<never, never>, Record<never, never>>,
    '/carriers/advertisements/[id]': RouteRecordInfo<'/carriers/advertisements/[id]', '/carriers/advertisements/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/carriers/auth/login': RouteRecordInfo<'/carriers/auth/login', '/carriers/auth/login', Record<never, never>, Record<never, never>>,
    '/carriers/complaints/': RouteRecordInfo<'/carriers/complaints/', '/carriers/complaints', Record<never, never>, Record<never, never>>,
    '/carriers/complaints/[id]': RouteRecordInfo<'/carriers/complaints/[id]', '/carriers/complaints/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/carriers/offers/': RouteRecordInfo<'/carriers/offers/', '/carriers/offers', Record<never, never>, Record<never, never>>,
    '/carriers/offers/[id]': RouteRecordInfo<'/carriers/offers/[id]', '/carriers/offers/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/carriers/orders/': RouteRecordInfo<'/carriers/orders/', '/carriers/orders', Record<never, never>, Record<never, never>>,
    '/carriers/orders/[id]': RouteRecordInfo<'/carriers/orders/[id]', '/carriers/orders/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/carriers/profile/': RouteRecordInfo<'/carriers/profile/', '/carriers/profile', Record<never, never>, Record<never, never>>,
    '/faq': RouteRecordInfo<'/faq', '/faq', Record<never, never>, Record<never, never>>,
    '/landing/carriers': RouteRecordInfo<'/landing/carriers', '/landing/carriers', Record<never, never>, Record<never, never>>,
    '/landing/shippers': RouteRecordInfo<'/landing/shippers', '/landing/shippers', Record<never, never>, Record<never, never>>,
    '/shippers/advertisements/': RouteRecordInfo<'/shippers/advertisements/', '/shippers/advertisements', Record<never, never>, Record<never, never>>,
    '/shippers/advertisements/[id]': RouteRecordInfo<'/shippers/advertisements/[id]', '/shippers/advertisements/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/shippers/auth/login': RouteRecordInfo<'/shippers/auth/login', '/shippers/auth/login', Record<never, never>, Record<never, never>>,
    '/shippers/complaints/': RouteRecordInfo<'/shippers/complaints/', '/shippers/complaints', Record<never, never>, Record<never, never>>,
    '/shippers/complaints/[id]': RouteRecordInfo<'/shippers/complaints/[id]', '/shippers/complaints/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/shippers/offers/': RouteRecordInfo<'/shippers/offers/', '/shippers/offers', Record<never, never>, Record<never, never>>,
    '/shippers/offers/[id]': RouteRecordInfo<'/shippers/offers/[id]', '/shippers/offers/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/shippers/orders/': RouteRecordInfo<'/shippers/orders/', '/shippers/orders', Record<never, never>, Record<never, never>>,
    '/shippers/orders/[id]': RouteRecordInfo<'/shippers/orders/[id]', '/shippers/orders/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/shippers/profile/': RouteRecordInfo<'/shippers/profile/', '/shippers/profile', Record<never, never>, Record<never, never>>,
    '/users': RouteRecordInfo<'/users', '/users', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
